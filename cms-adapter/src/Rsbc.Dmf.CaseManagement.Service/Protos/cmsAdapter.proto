syntax = "proto3";

import "google/protobuf/timestamp.proto";

option csharp_namespace = "Rsbc.Dmf.CaseManagement.Service";

package CaseManagement;

service CaseManager {
  // Seach cases. Can also return a specific case.
  rpc Search (SearchRequest) returns (SearchReply);

  // Get a token given a secret.
  rpc GetToken (TokenRequest) returns (TokenReply);

  // Update a Case
  rpc UpdateCase(UpdateCaseRequest) returns (UpdateCaseReply);

  // Get all the flags
  rpc GetAllFlags(GetAllFlagsRequest) returns (GetAllFlagsReply);
}

message SearchRequest {
  string caseId = 1;
  string title = 2;
  string clinicId = 3;
  string driverLicenseNumber = 4;
  repeated string statuses = 5;
}

message SearchReply {
  repeated DmerCase items = 1;
  ResultStatus resultStatus = 2;
  string errorDetail = 3;
}

message GetAllFlagsRequest {	
}

message GetAllFlagsReply {
	repeated FlagItem Flags = 1;
}

message DmerCase {
	string caseId = 1;
	string createdBy = 2;
	google.protobuf.Timestamp createdOn = 3;
	string modifiedBy = 4;
	google.protobuf.Timestamp modifiedOn = 5;
	bool isCommercial = 6;
	string title = 7;
	Driver driver = 10;
	Provider provider = 11;	
	string status = 12;
	string clinicName = 13;
	repeated FlagItem Flags = 30;
}

message Driver {
	string id = 1;
    string name = 2;
	string givenName = 3;
	string surname = 4;
	double weight = 5;
	string sex = 6;
	google.protobuf.Timestamp birthDate = 7;
	double height = 8;
	string seck = 9;
    Address address = 10;
	string driverLicenceNumber = 11;
}

message Provider {
	string id = 1;	
	string name = 2;
	string givenName = 3;
	string surname = 4;
	string providerDisplayId = 5;
	string providerDisplayIdType = 6;
	string providerRole = 7;
	string providerSpecialty = 8;
	string phoneUseType = 9;
	string phoneNumber = 10;
	string phoneExtension = 11;
	string faxUseType = 12;
	string faxNumber = 13;
	Address address = 14;	
}

message Address {
	string line1 = 1;
	string line2 = 2;
	string city = 3;
	string postal = 4;
}

enum ResultStatus {
	Fail = 0;
	Success = 1;
}

message TokenRequest {
	string secret = 1;
}

message TokenReply {
	ResultStatus resultStatus = 1;
	string token = 2;
	string errorDetail = 3;
}

message UpdateCaseRequest{
	string caseId = 1;
	bool isCleanPass = 2;
	repeated FlagItem flags = 3;
	string pdfFileKey = 4;
	int64 pdfFileSize = 5;
	string dataFileKey = 6;
	int64 dataFileSize = 7;
}

message UpdateCaseReply {	
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
}

message FlagItem {
	string identifier = 1;
	string question = 2;
	bool result = 3;
	enum FlagTypeOptions {
		Unknown = 0;
		Submittal = 1;
		Review = 2;
		FollowUp = 3;
		Message = 4;
	}
	FlagTypeOptions flagType = 4;
}

service UserManager {
  rpc Search (UsersSearchRequest) returns (UsersSearchReply);
  rpc Login (UserLoginRequest) returns (UserLoginReply);
}


message UsersSearchRequest {
	string userId = 1;
	string externalSystem = 2;
	string externalSystemUserId = 3;
	UserType userType = 4;
}

message UsersSearchReply {
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
	repeated User user = 10;
}

message UserLoginRequest {
	string externalSystemUserId = 1;
	string externalSystem = 2;
	UserType userType = 3; 
	string firstName = 10;
	string lastName = 11;
	repeated UserProfile userProfiles = 20;
}

message UserLoginReply {
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
	string userId = 10;
}

message User {
	string id = 1;
	string externalSystemUserId = 2;
	string externalSystem = 3;
	string firstName = 10;
	string lastName = 11;
	repeated UserProfile linkedProfiles = 20;
}

message UserProfile {
	oneof profile {
		MedicalPractitionerProfile medicalPractitioner = 1;
		DriverProfile driver = 2;
	}
}

message MedicalPractitionerProfile {
	string id = 1;
	string role = 2;
	Clinic clinic = 3;
}

message Clinic {
	string id = 1;
	string name = 2;
}

message DriverProfile {
	string id = 1;

}

enum UserType {
	MedicalPractitionerUserType = 0;
	DriverUserType = 1;
}

