syntax = "proto3";

import "google/protobuf/timestamp.proto";

option csharp_namespace = "Rsbc.Dmf.CaseManagement.Service";

package CaseManagement;

service CaseManager {

  rpc CreateBringForward(BringForwardRequest) returns (ResultStatusReply);

  rpc CreateLegacyCaseComment (LegacyComment) returns (CreateStatusReply);

  rpc CreateICBCMedicalCandidateComment(LegacyComment) returns (CreateStatusReply);

  rpc CreateLegacyCaseDocument (LegacyDocument) returns (CreateStatusReply);

  rpc CreateUnsolicitedCaseDocument(LegacyDocument) returns (CreateStatusReply);

  rpc CreateCaseDocument(LegacyDocument) returns (CreateStatusReply);

  rpc CreateUnsolicitedDocumentOnDriver(LegacyDocument) returns (CreateStatusReply);

  rpc CreateDocumentOnDriver(LegacyDocument) returns (CreateStatusReply);

  rpc CreateICBCDocumentEnvelope(LegacyDocument) returns (CreateStatusReply);

  rpc DeleteLegacyCaseDocument (LegacyDocumentRequest) returns (ResultStatusReply);

  rpc DeleteComment (CommentIdRequest) returns (ResultStatusReply);

  rpc GetAllDriverComments (DriverLicenseRequest) returns (GetCommentsReply);

  // Get all the flags
  rpc GetAllFlags(EmptyRequest) returns (GetAllFlagsReply);

  rpc GetComment (CommentIdRequest) returns (GetCommentReply);

  rpc GetComments (CommentsRequest) returns (GetCommentsReply);

  rpc GetCases (CaseStatusRequest) returns (GetCasesReply);

  rpc GetActiveCases (DriverLicenseRequest) returns (GetCasesReply);

  rpc GetCaseDetail (CaseIdRequest) returns (GetCaseDetailReply);

  rpc GetMostRecentCaseDetail (DriverIdRequest) returns (GetCaseDetailReply);

  // Search Case By IdCode
  rpc GetCaseByIdCode (GetCaseByIdCodeRequest) returns (GetCaseDetailReply);

  rpc GetCaseDocuments (CaseIdRequest) returns (GetDocumentsReply);

  rpc GetDriverComments (DriverLicenseRequest) returns (GetCommentsReply);

  rpc GetDriverDocumentsById (DriverIdRequest) returns (GetDocumentsReply);

  rpc GetIcbcDmerEnvelopes (DriverLicenseRequest) returns (GetDocumentsReply);

  rpc GetDriverDocuments (DriverLicenseRequest) returns (GetDocumentsReply);

  rpc GetDrivers (EmptyRequest) returns (GetDriversReply);

  rpc GetDriverPerson (DriverLicenseRequest) returns (GetDriversReply);
  // Obsolete - user GetDriverPerson instead
  rpc GetDriver (DriverLicenseRequest) returns (GetDriversReply);

  rpc GetDriverById (DriverIdRequest) returns (GetDriversReply);

  rpc GetLegacyDocument (LegacyDocumentRequest) returns (GetLegacyDocumentReply);

  // Get a token given a secret.
  rpc GetToken (TokenRequest) returns (TokenReply);

  rpc GetUnsentMedicalPass(EmptyRequest) returns (SearchReply);

  rpc GetUnsentMedicalAdjudication(EmptyRequest) returns (SearchReply);

  rpc MarkMedicalUpdatesSent(IdListRequest) returns (ResultStatusReply);

  // Logs error when the icbc update fails
  rpc MarkMedicalUpdateError (IcbcErrorRequest) returns (ResultStatusReply);

  // process a line item from the legacy candidate list
  rpc ProcessLegacyCandidate (LegacyCandidateRequest) returns (LegacyCandidateReply);

  // Seach cases. Can also return a specific case.
  rpc Search (SearchRequest) returns (SearchReply);

  rpc SetCasePractitionerClinic(SetCasePractitionerClinicRequest) returns (SetCasePractitionerClinicReply);
  
  //Create a case
  rpc CreateCase(CreateCaseRequest) returns (ResultStatusReply);

  // Update a Case
  rpc UpdateCase(UpdateCaseRequest) returns (UpdateCaseReply);

  rpc CreateDecision (LegacyDecision) returns (ResultStatusReply);

  // Create a Driver
  rpc CreateDriverPerson (CreateDriverPersonRequest) returns (CreateDriverReply);
  // Obsolete - user CreateDriverPerson instead
  rpc CreateDriver (CreateDriverRequest) returns (ResultStatusReply);

  // Update a Driver
  rpc UpdateDriver(Driver) returns (ResultStatusReply);

  // Resolve a case
  rpc ResolveCaseStatusUpdates(EmptyRequest) returns (ResultStatusReply);

  // Update Birth Date
  rpc UpdateBirthDate(UpdateDriverRequest) returns (ResultStatusReply);

  //Update Clean Pass Flag
  rpc UpdateCleanPassFlag(CaseIdRequest) returns (ResultStatusReply);

  //Update Manual Pass Flag
  rpc UpdateManualPassFlag(CaseIdRequest) returns (ResultStatusReply);

  // Send To BC mail
  rpc GetPdfDocuments(EmptyRequest) returns (PdfDocumentReply);

  rpc UpdateDocumentStatus(PdfDocument) returns (PdfDocumentReply);

  // Update Non Comply documents
  rpc UpdateNonComplyDocuments(EmptyRequest) returns (ResultStatusReply);

  
}

// sync with EntityState enum in Rsbc.Dmf.CaseManagement\Dynamics\DynamicsContext.cs
enum EntityState {
    Active = 0;
    Inactive = 1;
    Cancelled = 2;
}

// clean, use Dynamics display name when adding new fields
message Case {
    string caseNumber = 1;
    Person person = 2;
    string dmerType = 3;
    string id = 4;
}

// clean, use Dynamics display name when adding new fields
message Person {
    string fullName = 1;
	google.protobuf.Timestamp birthday = 7;
}

message UpdateDriverRequest{
    string driverLicenseNumber=1;
    google.protobuf.Timestamp birthDate = 2;
}

message DriverIdRequest {
    string id = 1;
}

message DriverLicenseRequest {
	string driverLicenseNumber = 1;
}

message CaseIdRequest {
    string caseId= 1;
}

message CaseStatusRequest {
	string driverId = 1;
	EntityState status = 2;
}

enum OriginRestrictions {
    None = 0;
    UserOnly = 1;
    SystemOnly = 2;
}

message CommentsRequest {
	string caseId= 1;
	string driverId= 2;
	OriginRestrictions originRestrictions =3;
}

message CommentIdRequest {
    string commentId= 1;
}

message LegacyDocumentRequest {
    string documentId=1;
}

message LegacyDocumentStatusRequest{
    string documentId=1;
    int64 status = 2;
}

message GetCasesReply {
	repeated CaseDetail items = 1;
	ResultStatus resultStatus = 2;
	string errorDetail = 3;
}

message GetCaseDetailReply {
    CaseDetail item = 1;
    ResultStatus resultStatus = 2;
    string errorDetail = 3;
}

message GetCommentsReply {
    repeated LegacyComment items = 1;
    ResultStatus resultStatus = 2;
    string errorDetail = 3;
}

message GetDocumentsReply {
    repeated LegacyDocument items = 1;
    ResultStatus resultStatus = 2;
    string errorDetail = 3;
}

message GetCommentReply {
    LegacyComment item = 1;
    ResultStatus resultStatus = 2;
    string errorDetail = 3;
}

message LegacyComment {
	int64 SequenceNumber = 1;
	string CommentTypeCode = 2;
	string CommentText = 3;
	string UserId = 4;
	string CaseId = 5;
	string CommentId = 6;
	google.protobuf.Timestamp CommentDate = 7;
	Driver Driver = 8;
	string Assignee = 9;
	string SignatureName = 10;
    string Origin  = 11;
}

message GetDocumentRequest {	
    string documentId = 1;
}

message GetLegacyDocumentReply {	
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    LegacyDocument document = 3;
}

message PdfDocumentReply {	
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    repeated PdfDocument pdfDocuments = 3;
}

message PdfDocument{
  string pdfDocumentId = 1;
  enum StatusCodeOptions{
      SendToBCMail = 0;
      Sent = 1;
      FailedToSend = 2;
   }
  StatusCodeOptions statusCode = 2;
  string filename = 3;
  string serverUrl = 4;
}

message CaseDetail {
    string caseId = 1;
    string title = 2;
    string idCode = 3;
    google.protobuf.Timestamp openedDate = 4;
    string caseType = 5;
    string dmerType = 6;
    string status = 7;
    string assigneeTitle = 8;
    google.protobuf.Timestamp lastActivityDate = 9;
    string latestDecision = 10;
    string decisionForClass = 11;
    google.protobuf.Timestamp decisionDate = 12;
    google.protobuf.Timestamp dpsProcessingDate = 13;
    int64 caseSequence = 14;
    string driverId = 15;
    int64 outstandingDocuments = 16;
    string eligibleLicenseClass = 17;
    string name = 18;
    string driverLicenseNumber = 19;
    google.protobuf.Timestamp birthDate = 20;
    string firstName = 21;
    string lastName = 22;
    string middlename = 23;
    google.protobuf.Timestamp latestComplianceDate = 24;
    repeated MedicalConditionItem medicalConditions = 25;
    bool ShowOnPortals = 26;
}

message CreateStatusReply {	
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    string id = 3;
}

message SearchRequest {
  string caseId = 1;
  string title = 2;
  string comment = 3;
  string clinicId = 4;
  string driverLicenseNumber = 5;
  repeated string statuses = 6;
}

message SearchReply {
  repeated DmerCase items = 1;
  ResultStatus resultStatus = 2;
  string errorDetail = 3;
}

message GetCaseByIdCodeRequest {
    string idCode= 1;
}

message EmptyRequest {	
}

message CleanPassRequest{
    string caseId = 1;
}

message ManualPassRequest{
    string caseId = 1;
}

message GetAllFlagsReply {
    repeated FlagItem Flags = 1;
}

message LegacyDecision {
	string caseId = 1;
	string driverId = 2;
	string outcomeText = 3;
	string subOutcomeText = 4;
	google.protobuf.Timestamp statusDate = 5;
}

message DmerCase {
	string caseId = 1;
	string createdBy = 2;
	google.protobuf.Timestamp createdOn = 3;
	string modifiedBy = 4;
	google.protobuf.Timestamp modifiedOn = 5;
	bool isCommercial = 6;
	string title = 7;
	Driver driver = 10;
	Provider provider = 11;	
	string status = 12;
	string dmerType = 13;
	string clinicName = 14;
	repeated FlagItem Flags = 30;
	repeated DecisionItem Decisions = 35;
	int64 caseSequence = 40;
    string documentId = 41;
    repeated MedicalConditionItem MedicalConditions = 45;
}

message Driver {
    string id = 1;
    string name = 2;
    string givenName = 3;
    string surname = 4;
    string middlename = 5;
    double weight = 6;
    string sex = 7;
    google.protobuf.Timestamp birthDate = 8;
    double height = 9;
    string seck = 10;
    Address address = 11;
    string driverLicenseNumber = 12;
}

message Provider {
    string id = 1;	
    string name = 2;
    string givenName = 3;
    string surname = 4;
    string providerDisplayId = 5;
    string providerDisplayIdType = 6;
    string providerRole = 7;
    string providerSpecialty = 8;
    string phoneUseType = 9;
    string phoneNumber = 10;
    string phoneExtension = 11;
    string faxUseType = 12;
    string faxNumber = 13;
    Address address = 14;	
}

// Obsolete use FullAddress instead
message Address {
    string line1 = 1;
    string line2 = 2;
    string city = 3;
    string postal = 4;
}

message FullAddress {
    string line1 = 1;
    string line2 = 2;
    string city = 3;
    string postal = 4;
    string province = 5;
    string country = 6;
}

enum ResultStatus {
    Fail = 0;
    Success = 1;
}

message TokenRequest {
    string secret = 1;
}

message TokenReply {
    ResultStatus resultStatus = 1;
    string token = 2;
    string errorDetail = 3;
}

message CreateDriverPersonRequest {
    string driverLicenseNumber = 1;
    google.protobuf.Timestamp birthDate = 2;
    string surname = 3;
    string givenName = 4;
    string loginId = 5;
}

message CreateDriverRequest {
    string driverLicenseNumber = 1;
    google.protobuf.Timestamp birthDate = 2;
    string surname = 3;
    string givenName = 4;
}

message CreateDriverReply {
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    string driverId = 3;
}

message CreateCaseRequest {
    string caseId = 1;
    int64 SequenceNumber = 2;
    string driverLicenseNumber = 3;
    string Priority = 4;
    string Owner = 5;
    string SubmittalStatus = 6;
}

message UpdateCaseRequest{
    string caseId = 1;
    bool isCleanPass = 2;
    repeated FlagItem flags = 3;
    string pdfFileKey = 4;
    int64 pdfFileSize = 5;
    string dataFileKey = 6;
    int64 dataFileSize = 7;
    string priority = 8;
    string assign = 9;
    bool isDmer = 10;
}

message UpdateCaseReply {	
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
}

message SetCasePractitionerClinicRequest{
    string caseId = 1;
    string PractitionerId = 2;
    string ClinicId = 3;
}

message SetCasePractitionerClinicReply{
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
}

message LegacyCandidateRequest{
    string licenseNumber = 1;
    string clientNumber = 2;
	string surname = 3;
	google.protobuf.Timestamp birthDate = 4;
	google.protobuf.Timestamp effectiveDate = 5;
	string medicalType = 10;
}

message LegacyCandidateReply{
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    bool isNewCase = 3;
}

message FlagItem {
    string identifier = 1;
    string question = 2;
    bool result = 3;
    enum FlagTypeOptions {
        Unknown = 0;
        Submittal = 1;
        Review = 2;
        FollowUp = 3;
        Message = 4;
    }
    FlagTypeOptions flagType = 4;
    string formId = 5;
}

message MedicalConditionItem {
    string id = 1;
    string description = 2;
    string formId = 3;
}

message DecisionItem {
    string identifier = 1;
    google.protobuf.Timestamp createdOn = 2;
    enum DecisionOutcomeOptions {
        Unknown = 0;
        FitToDrive = 1;
        NonComply = 2;
        UnfitToDrive = 3;
    }
    DecisionOutcomeOptions outcome = 3;
}

////////////////////////
// START DocumentManager

service DocumentManager {
    rpc GetDocumentsByTypeForUsers(GetDocumentsByTypeForUsersRequest) returns (GetDocumentsByTypeForUsersReply);
	rpc GetDocumentSubTypes(DocumentTypeRequest) returns (GetDocumentSubTypesReply);
	rpc GetDocumentSubTypeGuid(DocumentIdRequest) returns (GetDocumentSubTypeIdReply);
    rpc GetDmer(CaseIdRequest) returns (GetDmerReply);
    rpc GetDriverAndCaseDocuments(GetDriverAndCaseDocumentsRequest) returns (GetDriverAndCaseDocumentsReply);
    
    // Update Claim DMER on documents
    rpc UpdateDocument(UpdateDocumentRequest) returns (UpdateDocumentReply);
    rpc UpdateClaimDmer(UpdateClaimRequest) returns (UpdateClaimReply);
    rpc UpdateUnClaimDmer(UpdateClaimRequest) returns (UpdateClaimReply); 

    // Get all documents
      rpc GetDriverDocumentsById (DriverIdRequest) returns (GetDocumentsReply);
}

message UpdateDocumentRequest {
    string id = 1;
    int32 submittalStatus = 2;
}

message UpdateDocumentReply {
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
}

message UpdateClaimRequest {
  string loginId = 1;
  string documentId = 2;
}

message UpdateClaimReply {
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    DmerCase item = 3;
}

message GetDocumentsByTypeForUsersRequest {
    repeated string loginIds = 1;
    string documentTypeCode = 2;
}

message GetDocumentsByTypeForUsersReply {
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    repeated Document items = 3;
}

 message Document {
     string dmerType = 1;
     string dmerStatus = 2;
     google.protobuf.Timestamp complianceDate = 3;
     Case case = 4;
     string submittalStatus = 5;
     google.protobuf.Timestamp createdOn = 6;
	 string description = 8;
     DocumentType documentType = 9;
     DocumentSubType documentSubType = 10;
     string documentUrl = 11;
     string documentId = 12;
     Provider provider = 13;	
     string IdCode = 14;
     google.protobuf.Timestamp faxReceivedDate = 15;
 }

 message DocumentType{
	 string documentName = 1;
 }

 message GetDriverAndCaseDocumentsRequest {
     string loginId = 1;
     Driver Driver = 2;
     string caseId = 3;
 }

 message GetDmerReply {
     DmerCase item = 1;
     ResultStatus resultStatus = 2;
     string errorDetail = 3;
 }

 message GetDriverAndCaseDocumentsReply {
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    repeated Document items = 3;
}

message LegacyDocument {
	int64 SequenceNumber = 1;
	string DocumentTypeCode = 2;
	string DocumentType = 3;
	string BusinessArea = 4;
	string DocumentUrl = 5;
	string UserId = 6;
	string CaseId = 7;
	string DocumentId = 8;	
	google.protobuf.Timestamp FaxReceivedDate = 9;
	google.protobuf.Timestamp ImportDate = 10;
	string ImportId = 11;
	Driver Driver = 12;
	string BatchId = 13;
	string OriginatingNumber = 14;
	int64 DocumentPages = 15;
	string ValidationMethod = 16;
	string ValidationPrevious = 17;
	string Priority = 18;
	string Owner = 19;
	string SubmittalStatus = 20;
	string Queue = 21;
	int64 DpsDocumentId = 22;
	string FilenameOverride = 23;
	string Origin = 24;
	google.protobuf.Timestamp CreateDate = 25;
	google.protobuf.Timestamp DueDate = 26;
	string Description = 27;
	string IdCode = 28;
	string CaseType = 29;
	string DocumentSubTypeId = 30;
    string DocumentSubType = 31;
    bool ShowOnPortals = 32;

}

message DocumentIdRequest {
	int32 id = 1;
}

message DocumentTypeRequest {
	string documentTypeCode = 1;
}

message DocumentSubType {
	int32 id = 1;
	string name = 2;
}

message GetDocumentSubTypesReply {
	repeated DocumentSubType items = 1;
	ResultStatus resultStatus = 2;
	string errorDetail = 3;
}

message GetDocumentSubTypeIdReply {
	string id = 1;
	ResultStatus resultStatus = 2;
	string errorDetail = 3;
}

// END DocumentManager
////////////////////////
// START CssManager

service CssManager {
    rpc GetCss(CssRequest) returns (CssReply);
}

message CssRequest {	
    string id = 1;
}

message CssReply {	
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    string css = 3; 
}

// END CssManager
////////////////////////
// START UserManager

service UserManager {
  rpc Search (UsersSearchRequest) returns (UsersSearchReply);
  rpc Login (UserLoginRequest) returns (UserLoginReply);
  rpc SetEmail(UserSetEmailRequest) returns (ResultStatusReply);
  rpc UpdateEmail(UserSetEmailRequest) returns (ResultStatusReply);
  rpc SetDriverLogin(SetDriverLoginRequest) returns (SetDriverLoginReply);
  rpc UpdateLogin(UpdateLoginRequest) returns (ResultStatusReply);
  rpc IsDriverAuthorized(UserDriverAuthorizedRequest) returns (ResultBoolReply);
  rpc GetPractitionerContact(PractitionerRequest) returns (PractitionerReply);
}

message PractitionerReply{
	string contactId = 1;
	string gender = 2;
	string idpId = 3;
	google.protobuf.Timestamp birthdate = 4;
	string firstName = 5;
	string lastName = 6;
	string email = 7;
	string clinicName = 8;
	string role = 9;
}

message PractitionerRequest{
	string hpdid = 1;
}

message ResultBoolReply {
	bool result = 1;
}

message UserDriverAuthorizedRequest {
	string userId = 1;
	string driverId = 2;
}

message UserSetEmailRequest {
    string loginId = 1;
    string email = 2;
}

message SetDriverLoginRequest {
    string loginId = 1;
    string driverId = 2;
}

message SetDriverLoginReply {
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    bool hasDriver = 3;
}

message UpdateLoginRequest {
    string driverLicenseNumber = 1;
    string loginId = 2;
    string email = 3;
    bool notifyByMail = 4;
    bool notifyByEmail = 5;
    string externalUserName = 6;
    FullAddress address = 7;
}

message UsersSearchRequest {
    string userId = 1;
    string externalSystem = 2;
    string externalSystemUserId = 3;
    UserType userType = 4;
}

message UsersSearchReply {
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    repeated User user = 10;
}

message GetDriversReply {
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    repeated Driver items = 10;
}

message UserLoginRequest {
    string externalSystemUserId = 1;
    string externalSystem = 2;
    UserType userType = 3; 
    string firstName = 10;
    string lastName = 11;
    repeated UserProfile userProfiles = 20;
    string email = 21;
}

message UserLoginReply {
	ResultStatus resultStatus = 1;
	string errorDetail = 2;
	string userId = 10;
	string userEmail = 11;
	string driverId = 12;
    string driverLicenseNumber = 13;
    repeated string loginIds = 14;
}

message User {
    string id = 1;
    string externalSystemUserId = 2;
    string externalSystem = 3;
    string firstName = 10;
    string lastName = 11;
    repeated string roles = 12;
    repeated UserProfile linkedProfiles = 20;
}

message UserProfile {
    oneof profile {
        MedicalPractitionerProfile medicalPractitioner = 1;
        DriverProfile driver = 2;
    }
}

message MedicalPractitionerProfile {
    string id = 1;
    // TODO remove role, clinic after regression testing UsersSearchReply
    string role = 2;
    Clinic clinic = 3;
}

// TODO remove this after regression testing UsersSearchReply
message Clinic {
    string id = 1;
    string name = 2;
}

message DriverProfile {
    string id = 1;
}

enum UserType {
    MedicalPractitionerUserType = 0;
    DriverUserType = 1;
}

message IdListRequest {
    repeated string idList = 1;
}

message IcbcErrorRequest{
    // string caseId = 1
    string caseId = 1;
    string errorMessage = 2;
}

message ResultStatusReply {	
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
}


// END UserManager
////////////////////////
// START CallbackManager

service CallbackManager {
    rpc Create (Callback) returns (ResultStatusReply);
    rpc GetDriverCallbacks (DriverIdRequest) returns (GetDriverCallbacksReply);
    rpc Cancel (CallbackCancelRequest) returns (ResultStatusReply);
}

message CallbackCancelRequest {
    string caseId = 1;
    string callbackId = 2;
}

enum CallbackPriority {
	Low = 0;
	Normal = 1;
	High = 2;
}

message Callback {
    string id = 1;
    string caseId = 2;
    string assignee = 3; 
    string subject = 4;
    string description = 5;	
    CallbackPriority priority = 6;
    google.protobuf.Timestamp requestCallback = 7;
    enum CallbackCallStatus {
        open = 0;
        closed = 1;
    }
    CallbackCallStatus callStatus = 8;
   // string phone = 9;
    enum PreferredTime {
        Anytime = 0;
        Morning = 1;
        Evening = 2;
    }
    PreferredTime preferredTime = 10;
    google.protobuf.Timestamp closedDate = 11;
    int32 origin = 12;
}

// Obsolete - use CallbackRequest
message BringForwardRequest {
    string caseId = 1;
    // if assignee is blank, assign to the Owner of the Case.
    string assignee = 2; 
    string subject = 3;
    string description = 4;	
    CallbackPriority priority = 5;
}

message GetDriverCallbacksReply {
    ResultStatus resultStatus = 1;
    string errorDetail = 2;
    string driverId = 3;
    repeated Callback items = 4;
}

// END CallbackManager
////////////////////////

// START CommentManager


service CommentManager{

// Get Comments
 rpc GetCommentOnDriver (DriverIdRequest) returns (GetCommentsReply);

 // Add Comments
  rpc AddCaseComment (LegacyComment) returns (CreateStatusReply);
}



// END CommentManager