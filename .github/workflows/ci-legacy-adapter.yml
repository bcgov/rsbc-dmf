name: ci-legacy-adapter

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    paths:
      - 'legacy-adapter/src/**'
      - '.github/workflows/ci-legacy-adapter.yml'

env:
  IMAGE_NAME: legacy-adapter
  solution-folder: legacy-adapter/src/
  IMAGE_ID: ${{ secrets.OCP4_REGISTRY }}/${{ secrets.OCP4_NAMESPACE }}/legacy-adapter   
  RUN_NUMBER: ${{ github.run_number }}
  BUILD_PREFIX: ${{ vars.versionprefix }}
  BUILD_ID: ${{ github.server_url }}!${{ github.repository }}!${{ github.ref_name }}!${{ github.sha }}!${{ vars.versionprefix }}!${{ github.run_number }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'bcgov'
    env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       GIT_BRANCH: "${{github.ref}}"
    steps:
      - uses: actions/checkout@v4
        
      - uses: rlespinasse/git-commit-data-action@v1.x
      - name: Extract Branch Name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Setup .NET 
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "8.0.x"
      - name: Install dependencies
        run: dotnet restore
        working-directory: ${{env.working-directory}}${{env.solution-folder}}

      - name: Install coverlet for code coverage
        run: dotnet tool install -g coverlet.console --version 1.7.2
        working-directory: ${{env.working-directory}}${{env.solution-folder}}

      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{env.working-directory}}${{env.solution-folder}}

      - name: Test
        run: |          
          dotnet test -c Release --no-restore --verbosity normal --blame-hang --blame-hang-timeout 30s
        timeout-minutes: 10          
        working-directory: ${{env.working-directory}}${{env.solution-folder}}

      - name: Generate code coverage
        working-directory: ${{env.working-directory}}${{env.solution-folder}}
        run: |
          mkdir -p CovTestResults
          rm -rf .Rsbc.Unit.Tests.Dmf.LegacyAdapter/TestResults
          dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --no-restore
          mv Rsbc.Unit.Tests.Dmf.LegacyAdapter/TestResults/*/* ./CovTestResults/
          head CovTestResults/coverage.opencover.xml      
      
      - name: Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          # User defined upload name. Visible in Codecov UI
          name: DMF-MEDICAL-PORTAL-API
          # Repository upload token - get it from codecov.io. Required only for private repositories
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{env.working-directory}}${{env.solution-folder}}CovTestResults/coverage.opencover.xml
          # Flag upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
          flags: unittests
          # Environment variables to tag the upload with (e.g. PYTHON | OS,PYTHON)
          env_vars: C#
          # Specify whether or not CI build should fail if Codecov runs into an error during upload
          fail_ci_if_error: false
