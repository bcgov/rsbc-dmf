---
kind: Template
apiVersion: v1
metadata:
  name: "${NAME}-template"
  creationTimestamp: 
objects:
- kind: Pipeline
  apiVersion: tekton.dev/v1beta1
  metadata:    
    name: init-prod
  spec:
    tasks:
      - name: tag-images
        params:
          - name: SCRIPT
            value: |
              oc tag cms-adapter:test cms-adapter:prod
              oc tag doctors-portal-api:test doctors-portal-api:prod
              oc tag doctors-portal-ui:test doctors-portal-ui:prod
              oc tag document-storage-adapter:test document-storage-adapter:prod
              oc tag document-triage-service:test document-triage-service:prod
              oc tag jh-etk-icbcadapter-image:test jh-etk-icbcadapter-image:prod
              oc tag landing-page:test landing-page:prod
              oc tag oauth-server:test oauth-server:prod
              oc tag phsa-adapter:test phsa-adapter:prod              
        taskRef:
          kind: ClusterTask
          name: openshift-client
- kind: Pipeline
  apiVersion: tekton.dev/v1beta1
  metadata:    
    name: promote-prod
  spec:
    tasks:
      - name: tag-images
        params:
          - name: SCRIPT
            value: |
              oc tag cms-adapter:prod cms-adapter:prod-backup
              oc tag doctors-portal-api:prod doctors-portal-api:prod-backup
              oc tag doctors-portal-ui:prod doctors-portal-ui:prod-backup
              oc tag document-storage-adapter:prod document-storage-adapter:prod-backup
              oc tag document-triage-service:prod document-triage-service:prod-backup
              oc tag jh-etk-icbcadapter-image:prod jh-etk-icbcadapter-image:prod-backup
              oc tag landing-page:prod landing-page:prod-backup
              oc tag oauth-server:prod oauth-server:prod-backup
              oc tag phsa-adapter:prod phsa-adapter:prod-backup
              oc tag cms-adapter:test cms-adapter:prod
              oc tag doctors-portal-api:test doctors-portal-api:prod
              oc tag doctors-portal-ui:test doctors-portal-ui:prod
              oc tag document-storage-adapter:test document-storage-adapter:prod
              oc tag document-triage-service:test document-triage-service:prod
              oc tag jh-etk-icbcadapter-image:test jh-etk-icbcadapter-image:prod
              oc tag landing-page:test landing-page:prod
              oc tag oauth-server:test oauth-server:prod
              oc tag phsa-adapter:test phsa-adapter:prod              
        taskRef:
          kind: ClusterTask
          name: openshift-client
- kind: Pipeline
  apiVersion: tekton.dev/v1beta1
  metadata:
    name: promote-test
  spec:
    tasks:
      - name: tag-images
        params:
          - name: SCRIPT
            value: |
              oc tag cms-adapter:latest cms-adapter:test
              oc tag doctors-portal-api:latest doctors-portal-api:test
              oc tag doctors-portal-ui:latest doctors-portal-ui:test
              oc tag document-storage-adapter:latest document-storage-adapter:test
              oc tag document-triage-service:latest document-triage-service:test
              oc tag jh-etk-icbcadapter-image:latest jh-etk-icbcadapter-image:test
              oc tag landing-page:latest landing-page:test
              oc tag oauth-server:latest oauth-server:test
              oc tag phsa-adapter:latest phsa-adapter:test
        taskRef:
          kind: ClusterTask
          name: openshift-client        
- kind: Pipeline
  apiVersion: tekton.dev/v1beta1
  metadata:
    name: undo-last-prod-deployment    
  spec:
    tasks:
      - name: tag-images
        params:
          - name: SCRIPT
            value: |
              oc tag cms-adapter:prod-backup cms-adapter:prod
              oc tag doctors-portal-api:prod-backup doctors-portal-api:prod
              oc tag doctors-portal-ui:prod-backup doctors-portal-ui:prod
              oc tag document-storage-adapter:prod-backup document-storage-adapter:prod
              oc tag document-triage-service:prod-backup document-triage-service:prod
              oc tag jh-etk-icbcadapter-image:prod-backup jh-etk-icbcadapter-image:prod
              oc tag landing-page:prod-backup landing-page:prod
              oc tag oauth-server:prod-backup oauth-server:prod
              oc tag phsa-adapter:prod-backup phsa-adapter:prod
        taskRef:
          kind: ClusterTask
          name: openshift-client
- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: run-test    
  spec:
    steps:
      - env:
        - name: WORKSPACE_TESTFILES_PATH
          value: $(workspaces.testfiles.path)
        - name: baseUri
          value: https://roadsafetybcportal-test.apps.silver.devops.gov.bc.ca/rsbc-dfp-medical-portal/
        - name: CHROME_BINARY_LOCATION
          value: /opt/google/chrome/chrome
        - name: DYNAMICS_BASE_URI
          value: https://rsbc-dfp.dev.jag.gov.bc.ca
        - name: PHSAUri
          value: 'https://apps.form.io/phsa/#/auth'
        - name: BC_SERVICE_CARD_VIRTUAL_TOKEN
          value: CHANGEME
        - name: BC_SERVICE_CARD_PASSWORD
          value: 'CHANGEME'        
      - name: run-tests
        image: '0137d5-tools/agent-dotnet:latest'
        resources: {}
        script: >
          #!/usr/bin/env sh
          cd "${WORKSPACE_TESTFILES_PATH}"
          cd functional-tests/bdd-tests
          pwd 
          dotnet test --filter Category=@pipeline --logger junit;LogFilePath=functionalResults.xml"          
    workspaces:
      - description: A workspace containing the files to test
        name: testfiles
- kind: Pipeline
  apiVersion: tekton.dev/v1beta1
  metadata:
    name: smoke-test    
  spec:
    workspaces:
      - name: git-workspace
    tasks:
      - name: clone-repository
        taskRef:
          name: git-clone
        params:
          - name: url
            value: https://github.com/bcgov/rsbc-dmf
          - name: revision
            value: main          
        workspaces:
          - name: output
            workspace: git-workspace
      - name: run-test
        taskRef:
          name: run-test
        runAfter:
          - clone-repository
        workspaces:
          - name: testfiles
            workspace: git-workspace
- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    name: git-clone    
  spec:
    description: >-
      These Tasks are Git tasks to work with repositories used by other tasks in
      your Pipeline. The git-clone Task will clone a repo from the provided url
      into the output Workspace. By default the repo will be cloned into the root
      of your Workspace. You can clone into a subdirectory by setting this Task's
      subdirectory param. This Task also supports sparse checkouts. To perform a
      sparse checkout, pass a list of comma separated directory patterns to this
      Task's sparseCheckoutDirectories param.
    params:
      - description: Repository URL to clone from.
        name: url
        type: string
      - default: ''
        description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
        name: revision
        type: string
      - default: ''
        description: Refspec to fetch before checking out revision.
        name: refspec
        type: string
      - default: 'true'
        description: Initialize and fetch git submodules.
        name: submodules
        type: string
      - default: '1'
        description: 'Perform a shallow clone, fetching only the most recent N commits.'
        name: depth
        type: string
      - default: 'true'
        description: >-
          Set the `http.sslVerify` global git config. Setting this to `false` is
          not advised unless you are sure that you trust your git remote.
        name: sslVerify
        type: string
      - default: .
        description: Subdirectory inside the `output` Workspace to clone the repo into.
        name: subdirectory
        type: string
      - default: ''
        description: >-
          Define the directory patterns to match or exclude when performing a
          sparse checkout.
        name: sparseCheckoutDirectories
        type: string
      - default: 'true'
        description: >-
          Clean out the contents of the destination directory if it already exists
          before cloning.
        name: deleteExisting
        type: string
      - default: ''
        description: HTTP proxy server for non-SSL requests.
        name: httpProxy
        type: string
      - default: ''
        description: HTTPS proxy server for SSL requests.
        name: httpsProxy
        type: string
      - default: ''
        description: Opt out of proxying HTTP/HTTPS requests.
        name: noProxy
        type: string
      - default: 'true'
        description: Log the commands that are executed during `git-clone`'s operation.
        name: verbose
        type: string
      - default: 'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.21.0'
        description: The image providing the git-init binary that this Task runs.
        name: gitInitImage
        type: string
      - default: /tekton/home
        description: >
          Absolute path to the user's home directory. Set this explicitly if you
          are running the image as a non-root user or have overridden

          the gitInitImage param with an image containing custom user
          configuration.
        name: userHome
        type: string
    results:
      - description: The precise commit SHA that was fetched by this Task.
        name: commit
      - description: The precise URL that was fetched by this Task.
        name: url
    steps:
      - env:
          - name: HOME
            value: $(params.userHome)
          - name: PARAM_URL
            value: $(params.url)
          - name: PARAM_REVISION
            value: $(params.revision)
          - name: PARAM_REFSPEC
            value: $(params.refspec)
          - name: PARAM_SUBMODULES
            value: $(params.submodules)
          - name: PARAM_DEPTH
            value: $(params.depth)
          - name: PARAM_SSL_VERIFY
            value: $(params.sslVerify)
          - name: PARAM_SUBDIRECTORY
            value: $(params.subdirectory)
          - name: PARAM_DELETE_EXISTING
            value: $(params.deleteExisting)
          - name: PARAM_HTTP_PROXY
            value: $(params.httpProxy)
          - name: PARAM_HTTPS_PROXY
            value: $(params.httpsProxy)
          - name: PARAM_NO_PROXY
            value: $(params.noProxy)
          - name: PARAM_VERBOSE
            value: $(params.verbose)
          - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
            value: $(params.sparseCheckoutDirectories)
          - name: PARAM_USER_HOME
            value: $(params.userHome)
          - name: WORKSPACE_OUTPUT_PATH
            value: $(workspaces.output.path)
          - name: WORKSPACE_SSH_DIRECTORY_BOUND
            value: $(workspaces.ssh-directory.bound)
          - name: WORKSPACE_SSH_DIRECTORY_PATH
            value: $(workspaces.ssh-directory.path)
          - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
            value: $(workspaces.basic-auth.bound)
          - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
            value: $(workspaces.basic-auth.path)
        image: $(params.gitInitImage)
        name: clone
        resources: {}
        script: >
          #!/usr/bin/env sh

          set -eu

          if [ "${PARAM_VERBOSE}" = "true" ] ; then
            set -x
          fi

          if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
            cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
            cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
            chmod 400 "${PARAM_USER_HOME}/.git-credentials"
            chmod 400 "${PARAM_USER_HOME}/.gitconfig"
          fi

          if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
            cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
            chmod 700 "${PARAM_USER_HOME}"/.ssh
            chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
          fi

          CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

          cleandir() {
            # Delete any existing contents of the repo directory if it exists.
            #
            # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
            # or the root of a mounted volume.
            if [ -d "${CHECKOUT_DIR}" ] ; then
              # Delete non-hidden files and directories
              rm -rf "${CHECKOUT_DIR:?}"/*
              # Delete files and directories starting with . but excluding ..
              rm -rf "${CHECKOUT_DIR}"/.[!.]*
              # Delete files and directories starting with .. plus any other character
              rm -rf "${CHECKOUT_DIR}"/..?*
            fi
          }

          if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
            cleandir
          fi

          test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"

          test -z "${PARAM_HTTPS_PROXY}" || export
          HTTPS_PROXY="${PARAM_HTTPS_PROXY}"

          test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

          /ko-app/git-init \
            -url="${PARAM_URL}" \
            -revision="${PARAM_REVISION}" \
            -refspec="${PARAM_REFSPEC}" \
            -path="${CHECKOUT_DIR}" \
            -sslVerify="${PARAM_SSL_VERIFY}" \
            -submodules="${PARAM_SUBMODULES}" \
            -depth="${PARAM_DEPTH}" \
            -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
          cd "${CHECKOUT_DIR}"

          RESULT_SHA="$(git rev-parse HEAD)"

          EXIT_CODE="$?"

          if [ "${EXIT_CODE}" != 0 ] ; then
            exit "${EXIT_CODE}"
          fi

          printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"

          printf "%s" "${PARAM_URL}" > "$(results.url.path)"
    workspaces:
      - description: The git repo will be cloned onto the volume backing this Workspace.
        name: output
      - description: |
          A .ssh directory with private key, known_hosts, config, etc. Copied to
          the user's home before git commands are executed. Used to authenticate
          with the git remote when performing the clone. Binding a Secret to this
          Workspace is strongly recommended over other volume types.
        name: ssh-directory
        optional: true
      - description: |
          A Workspace containing a .gitconfig and .git-credentials file. These
          will be copied to the user's home before any git commands are run. Any
          other files in this Workspace are ignored. It is strongly recommended
          to use ssh-directory over basic-auth whenever possible and to bind a
          Secret to this Workspace over other volume types.
        name: basic-auth
        optional: true
parameters:
- name: NAME
  displayName: Name
  description: The name assigned to all of the resources defined in this template.
  required: true
  value: pipeline
